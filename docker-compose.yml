services:
  db:
    image: postgres:15
    container_name: leaveit-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  app:
    build: .
    container_name: leaveit-app
    restart: always
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # A base URL é útil para a sua API construir os links curtos
      BASE_URL: http://short.local 
    command: ["dotnet", "leave-it-small.dll"]
    labels:
      - "traefik.enable=true" 
      # Roteamento para a API (ex: /api/shorten, /api/links)
      - "traefik.http.routers.leaveit-api.rule=Host(`short.local`) && PathPrefix(`/api`)"
      - "traefik.http.routers.leaveit-api.entrypoints=web"
      # Roteamento inteligente para o short_code (o coração do desafio)
      - "traefik.http.routers.leaveit-redirect.rule=Host(`short.local`) && PathRegexp(`/`)"
      - "traefik.http.routers.leaveit-redirect.entrypoints=web"
      - "traefik.http.routers.leaveit-redirect.priority=10" # Prioridade para evitar conflitos com a rota da API
      - "traefik.http.services.leaveit-service.loadbalancer.server.port=5000" 

  traefik: 
      image: traefik:v3.5
      command: 
        - "--api.dashboard=true"
        - "--entrypoints.web.address=:80"
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
      ports:
        - "80:80"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - traefik-certs:/letsencrypt
      # ... (restante da sua config do traefik, que parece ok)

volumes:
  postgres_data:
  traefik-certs: